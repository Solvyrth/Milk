import random
import string
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("G√©n√©rateur de Mots de Passe")
        self.root.geometry("700x600")
        
        # Th√®me sombre macOS
        self.bg_dark = '#1c1c1e'
        self.bg_secondary = '#2c2c2e'
        self.bg_tertiary = '#3a3a3c'
        self.text_primary = '#ffffff'
        self.text_secondary = '#8e8e93'
        self.accent_blue = '#007aff'
        self.accent_green = '#34c759'
        self.accent_red = '#ff3b30'
        
        self.root.configure(bg=self.bg_dark)
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Title.TLabel', font=('SF Pro Display', 18, 'bold'), background=self.bg_dark, foreground=self.text_primary)
        style.configure('Subtitle.TLabel', font=('SF Pro Text', 11), background=self.bg_dark, foreground=self.text_secondary)
        style.configure('Custom.TLabel', font=('SF Pro Text', 12), background=self.bg_secondary, foreground=self.text_primary)
        style.configure('Custom.TButton', font=('SF Pro Text', 11, 'bold'))
        
        self.setup_ui()
        # Ne pas g√©n√©rer de mots de passe automatiquement au d√©marrage
        
    def setup_ui(self):
        # --- HEADER ---
        title_frame = tk.Frame(self.root, bg=self.bg_dark, highlightthickness=0, bd=0)
        title_frame.pack(pady=(32, 8))

        title_label = ttk.Label(title_frame, text="Milk", style='Title.TLabel')
        title_label.pack(pady=(0, 2))

        # Cr√©dit professionnel, espac√© et align√©
        credits_frame = tk.Frame(title_frame, bg=self.bg_dark, highlightthickness=0, bd=0)
        credits_frame.pack()
        tk.Label(credits_frame, text="D√©velopp√© par Solvyrth", font=("SF Pro Text", 10, "italic"), bg=self.bg_dark, fg=self.text_secondary, bd=0, padx=0, pady=0).pack(side=tk.LEFT)
        import webbrowser
        github_label = tk.Label(credits_frame, text="¬∑ GitHub", font=("SF Pro Text", 10, "underline"), bg=self.bg_dark, fg=self.accent_blue, cursor="hand2", bd=0, padx=0, pady=0)
        github_label.pack(side=tk.LEFT)
        github_label.bind("<Button-1>", lambda e: webbrowser.open("https://github.com/Solvyrth"))
        github_label.bind("<Enter>", lambda e: github_label.config(fg="#0051D0"))
        github_label.bind("<Leave>", lambda e: github_label.config(fg=self.accent_blue))

        version_label = ttk.Label(title_frame, text="Version ‚Ä¢ 2.1", style='Subtitle.TLabel')
        version_label.pack(pady=(2, 0))

        # --- MAIN CARD ---
        main_frame = tk.Frame(self.root, bg=self.bg_secondary, relief='flat', bd=0, highlightthickness=0)
        main_frame.pack(padx=20, pady=8, fill='both', expand=True)

        # --- CONFIG ---
        config_frame = tk.Frame(main_frame, bg=self.bg_secondary, highlightthickness=0, bd=0)
        config_frame.pack(pady=12, padx=12, fill='x')

        # Longueur
        length_frame = tk.Frame(config_frame, bg=self.bg_secondary, highlightthickness=0, bd=0)
        length_frame.pack(fill='x', pady=6, padx=2)
        length_label = tk.Label(length_frame, text="Longueur", bg=self.bg_secondary, fg=self.text_primary, font=('SF Pro Text', 10, 'bold'), padx=0, pady=0)
        length_label.pack(side='left', padx=(0,6))
        self.length_var = tk.StringVar(value="16")
        length_spinbox = tk.Spinbox(length_frame, from_=4, to=30, textvariable=self.length_var, width=4, font=('SF Pro Text', 10), bg=self.bg_tertiary, fg=self.text_primary, buttonbackground=self.bg_tertiary, relief='flat', bd=1, insertbackground=self.text_primary, selectbackground=self.accent_blue, highlightthickness=0, justify='center')
        length_spinbox.pack(side='right', padx=(6,0), pady=0)

        # Nombre
        count_frame = tk.Frame(config_frame, bg=self.bg_secondary, highlightthickness=0, bd=0)
        count_frame.pack(fill='x', pady=6, padx=2)
        count_label = tk.Label(count_frame, text="Nombre", bg=self.bg_secondary, fg=self.text_primary, font=('SF Pro Text', 10, 'bold'), padx=0, pady=0)
        count_label.pack(side='left', padx=(0,6))
        self.count_var = tk.StringVar(value="3")
        count_spinbox = tk.Spinbox(count_frame, from_=1, to=10, textvariable=self.count_var, width=4, font=('SF Pro Text', 10), bg=self.bg_tertiary, fg=self.text_primary, buttonbackground=self.bg_tertiary, relief='flat', bd=1, insertbackground=self.text_primary, selectbackground=self.accent_blue, highlightthickness=0, justify='center')
        count_spinbox.pack(side='right', padx=(6,0), pady=0)

        # --- OPTIONS ---
        options_frame = tk.Frame(config_frame, bg=self.bg_secondary, highlightthickness=0, bd=0)
        options_frame.pack(fill='x', pady=8)
        for text, var, icon in [
            ("Caract√®res sp√©ciaux", 'special_chars_var', "üî£"),
            ("Majuscules", 'uppercase_var', "üî§"),
            ("Minuscules", 'lowercase_var', "üî°"),
            ("Chiffres", 'numbers_var', "üî¢")]:
            setattr(self, var, tk.BooleanVar(value=True))
            cb = tk.Checkbutton(options_frame, text=f"{icon} {text}", variable=getattr(self, var), bg=self.bg_secondary, fg=self.text_primary, selectcolor=self.accent_blue, font=('SF Pro Text', 10), activebackground=self.bg_secondary, activeforeground=self.text_primary, relief='flat', bd=0, highlightthickness=0, padx=0, pady=0)
            cb.pack(anchor='w', pady=1)

        # --- BOUTONS ---
        buttons_frame = tk.Frame(main_frame, bg=self.bg_secondary, highlightthickness=0, bd=0)
        buttons_frame.pack(pady=10)
        btn_style = {'font': ('SF Pro Text', 10, 'bold'), 'relief': 'flat', 'bd': 0, 'padx': 14, 'pady': 6, 'cursor': 'hand2', 'highlightthickness': 0}
        generate_btn = tk.Button(buttons_frame, text="G√©n√©rer", command=self.on_generate_click, bg=self.accent_blue, fg='#222', activebackground='#0051D0', activeforeground='#222', **btn_style)
        generate_btn.pack(side='left', padx=4)
        save_btn = tk.Button(buttons_frame, text="Sauvegarder", command=self.save_to_file, bg=self.accent_green, fg='#222', activebackground='#249944', activeforeground='#222', **btn_style)
        save_btn.pack(side='left', padx=4)
        clear_btn = tk.Button(buttons_frame, text="Effacer", command=self.clear_results, bg=self.accent_red, fg='#222', activebackground='#b91d1d', activeforeground='#222', **btn_style)
        clear_btn.pack(side='left', padx=4)

        # --- RESULTATS ---
        results_frame = tk.Frame(main_frame, bg=self.bg_secondary, highlightthickness=0, bd=0)
        results_frame.pack(fill='both', expand=True, padx=10, pady=6)
        self.results_text = tk.Text(results_frame, height=8, font=('SF Mono', 10), bg=self.bg_tertiary, fg=self.text_primary, insertbackground=self.accent_blue, relief='flat', bd=1, selectbackground=self.accent_blue, selectforeground='#fff', wrap='word', padx=8, pady=8, highlightthickness=0)
        scrollbar = tk.Scrollbar(results_frame, orient='vertical', command=self.results_text.yview, bg=self.bg_tertiary, troughcolor=self.bg_secondary, activebackground=self.text_secondary, relief='flat', bd=0, highlightthickness=0)
        self.results_text.configure(yscrollcommand=scrollbar.set)
        self.results_text.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        self.results_text.insert(tk.END, "\nCliquez sur G√©n√©rer pour cr√©er vos mots de passe s√©curis√©s.\n\nAucun mot de passe n'est g√©n√©r√© tant que vous n'avez pas cliqu√© sur le bouton.")
        self.generated_passwords = []
    
    def on_generate_click(self):
        """Fonction appel√©e lors du clic sur le bouton G√©n√©rer"""
        print("DEBUG: Bouton G√©n√©rer cliqu√©!")
        self.generate_passwords()
        
    def generate_password(self, length, use_special_chars=True, use_uppercase=True, use_lowercase=True, use_numbers=True):
        """G√©n√®re un mot de passe selon les crit√®res sp√©cifi√©s"""
        chars = ""
        
        if use_lowercase:
            chars += string.ascii_lowercase
        if use_uppercase:
            chars += string.ascii_uppercase
        if use_numbers:
            chars += string.digits
        if use_special_chars:
            chars += "!@#$%^&*()_+-=[]{}|;:,.<>?"
            
        if not chars:
            # Si aucune option n'est s√©lectionn√©e, utiliser au moins les lettres
            chars = string.ascii_letters + string.digits
            
        password = ''.join(random.choice(chars) for _ in range(length))
        return password
    
    def generate_passwords(self):
        """G√©n√®re les mots de passe selon la configuration"""
        print("DEBUG: G√©n√©ration de mots de passe en cours...")
        try:
            length = int(self.length_var.get())
            count = int(self.count_var.get())
            
            if length < 4 or length > 30:
                messagebox.showerror("Erreur", "La longueur doit √™tre entre 4 et 30 caract√®res", parent=self.root)
                return
                
            if count < 1 or count > 10:
                messagebox.showerror("Erreur", "Le nombre doit √™tre entre 1 et 10", parent=self.root)
                return
            
            # V√©rifier qu'au moins une option est coch√©e
            if not any([self.special_chars_var.get(), self.uppercase_var.get(), 
                       self.lowercase_var.get(), self.numbers_var.get()]):
                # Cocher automatiquement toutes les options si aucune n'est s√©lectionn√©e
                self.special_chars_var.set(True)
                self.uppercase_var.set(True)
                self.lowercase_var.set(True)
                self.numbers_var.set(True)
            
            # Effacer et reg√©n√©rer
            self.generated_passwords = []
            self.results_text.config(state='normal')
            self.results_text.delete(1.0, tk.END)
            
            # G√©n√©rer les mots de passe
            print(f"DEBUG: G√©n√©ration de {count} mots de passe de {length} caract√®res")
            for i in range(count):
                password = self.generate_password(
                    length,
                    self.special_chars_var.get(),
                    self.uppercase_var.get(),
                    self.lowercase_var.get(),
                    self.numbers_var.get()
                )
                self.generated_passwords.append(password)
                print(f"DEBUG: Mot de passe {i+1}: {password}")
                
            print(f"DEBUG: ‚úÖ {len(self.generated_passwords)} mots de passe g√©n√©r√©s avec succ√®s")
            
            # Obtenir l'heure actuelle pour montrer quand la g√©n√©ration a eu lieu
            from datetime import datetime
            current_time = datetime.now().strftime("%H:%M:%S")
            generation_id = random.randint(1000, 9999)  # ID unique pour chaque g√©n√©ration
            
            # Affichage des r√©sultats avec un identifiant unique
            self.results_text.insert(tk.END, f"üïê NOUVELLE G√âN√âRATION √† {current_time} (ID: {generation_id})\n")
            self.results_text.insert(tk.END, f"‚úÖ {count} mot(s) de passe g√©n√©r√©(s) avec succ√®s !\n")
            self.results_text.insert(tk.END, f"üìè Longueur: {length} caract√®res\n")
            
            # Afficher les options utilis√©es
            options_used = []
            if self.special_chars_var.get():
                options_used.append("üî£ Caract√®res sp√©ciaux")
            if self.uppercase_var.get():
                options_used.append("üî§ Majuscules") 
            if self.lowercase_var.get():
                options_used.append("üî° Minuscules")
            if self.numbers_var.get():
                options_used.append("üî¢ Chiffres")
            
            self.results_text.insert(tk.END, f"üéØ Options: {', '.join(options_used)}\n")
            self.results_text.insert(tk.END, "‚îÅ" * 50 + "\n\n")
            
            for i, password in enumerate(self.generated_passwords, 1):
                self.results_text.insert(tk.END, f"üîë Mot de passe {i:2d}: {password}\n")
                
            self.results_text.insert(tk.END, "\n" + "‚îÅ" * 50 + "\n")
            self.results_text.insert(tk.END, "üí° Conseil: Utilisez des mots de passe diff√©rents pour chaque compte !")
            
            # Activer l'√©tat disabled pour √©viter la modification
            self.results_text.config(state='disabled')
            
            # Forcer le scroll vers le haut et la mise √† jour de l'affichage
            self.results_text.see(tk.INSERT)
            self.results_text.mark_set(tk.INSERT, "1.0")
            self.results_text.see("1.0")
            self.results_text.update()
            self.root.update()
            print("DEBUG: Mise √† jour de l'affichage termin√©e")
                
        except ValueError:
            messagebox.showerror("Erreur", "Veuillez entrer des valeurs num√©riques valides", parent=self.root)
        except Exception as e:
            messagebox.showerror("Erreur", f"Une erreur s'est produite: {str(e)}", parent=self.root)
    
    def save_to_file(self):
        """Sauvegarde les mots de passe dans un fichier"""
        if not self.generated_passwords:
            messagebox.showwarning("Attention", "Aucun mot de passe √† sauvegarder. G√©n√©rez d'abord des mots de passe.", parent=self.root)
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Fichiers texte", "*.txt"), ("Tous les fichiers", "*.*")],
            title="Sauvegarder les mots de passe",
            initialfile="mots_de_passe.txt"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n")
                    f.write("‚ïë               MOTS DE PASSE - PASSWORD GENERATOR             ‚ïë\n")
                    f.write("‚ïë                  https://github.com/solvyrth                 ‚ïë\n")
                    f.write("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n")
                    
                    f.write(f"üìä INFORMATIONS DE G√âN√âRATION:\n")
                    f.write(f"‚îú‚îÄ Nombre total: {len(self.generated_passwords)} mot(s) de passe\n")
                    f.write(f"‚îú‚îÄ Longueur: {self.length_var.get()} caract√®res\n")
                    f.write(f"‚îî‚îÄ Date de g√©n√©ration: {self.get_current_datetime()}\n\n")
                    
                    f.write(f"‚öôÔ∏è  OPTIONS UTILIS√âES:\n")
                    f.write(f"‚îú‚îÄ Caract√®res sp√©ciaux: {'‚úÖ Oui' if self.special_chars_var.get() else '‚ùå Non'}\n")
                    f.write(f"‚îú‚îÄ Majuscules (A-Z): {'‚úÖ Oui' if self.uppercase_var.get() else '‚ùå Non'}\n")
                    f.write(f"‚îú‚îÄ Minuscules (a-z): {'‚úÖ Oui' if self.lowercase_var.get() else '‚ùå Non'}\n")
                    f.write(f"‚îî‚îÄ Chiffres (0-9): {'‚úÖ Oui' if self.numbers_var.get() else '‚ùå Non'}\n\n")
                    
                    f.write("üîë MOTS DE PASSE G√âN√âR√âS:\n")
                    f.write("‚ïê" * 60 + "\n")
                    for i, password in enumerate(self.generated_passwords, 1):
                        f.write(f"{i:2d}. {password}\n")
                    f.write("‚ïê" * 60 + "\n\n")
                    
                    f.write("‚ö†Ô∏è  CONSEILS DE S√âCURIT√â:\n")
                    f.write("‚Ä¢ Utilisez un mot de passe diff√©rent pour chaque compte\n")
                    f.write("‚Ä¢ Ne partagez jamais vos mots de passe\n")
                    f.write("‚Ä¢ Stockez ce fichier dans un endroit s√©curis√©\n")
                    f.write("‚Ä¢ Supprimez ce fichier apr√®s utilisation si possible\n\n")
                    f.write("G√©n√©rateur cr√©√© par Solvyrth - Version 2.0")
                    
                messagebox.showinfo("Succ√®s", f"‚úÖ Mots de passe sauvegard√©s avec succ√®s !\n\nüìÅ Fichier: {filename}\n\nüí° N'oubliez pas de s√©curiser ce fichier.", parent=self.root)
            except Exception as e:
                messagebox.showerror("Erreur", f"‚ùå Erreur lors de la sauvegarde:\n{str(e)}", parent=self.root)
    
    def get_current_datetime(self):
        """Retourne la date et l'heure actuelles format√©es"""
        from datetime import datetime
        return datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")
    
    def clear_results(self):
        """Efface les r√©sultats"""
        self.results_text.delete(1.0, tk.END)
        self.generated_passwords = []
        self.results_text.insert(tk.END, "üóëÔ∏è R√©sultats effac√©s. Cliquez sur 'G√©n√©rer' pour cr√©er de nouveaux mots de passe.")
    
    def open_github_profile(self, event=None):
        """Ouvre le profil GitHub dans le navigateur"""
        import webbrowser
        webbrowser.open("https://github.com/Solvyrth")

def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
