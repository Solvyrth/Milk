import random
import string
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("G√©n√©rateur de Mots de Passe")
        self.root.geometry("700x600")
        
        # Th√®me sombre macOS
        self.bg_dark = '#1c1c1e'
        self.bg_secondary = '#2c2c2e'
        self.bg_tertiary = '#3a3a3c'
        self.text_primary = '#ffffff'
        self.text_secondary = '#8e8e93'
        self.accent_blue = '#007aff'
        self.accent_green = '#34c759'
        self.accent_red = '#ff3b30'
        
        self.root.configure(bg=self.bg_dark)
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Title.TLabel', font=('SF Pro Display', 18, 'bold'), background=self.bg_dark, foreground=self.text_primary)
        style.configure('Subtitle.TLabel', font=('SF Pro Text', 11), background=self.bg_dark, foreground=self.text_secondary)
        style.configure('Custom.TLabel', font=('SF Pro Text', 12), background=self.bg_secondary, foreground=self.text_primary)
        style.configure('Custom.TButton', font=('SF Pro Text', 11, 'bold'))
        
        self.setup_ui()
        # Ne pas g√©n√©rer de mots de passe automatiquement au d√©marrage
        
    def setup_ui(self):
        # Titre principal avec style macOS
        title_frame = tk.Frame(self.root, bg=self.bg_dark)
        title_frame.pack(pady=30)
        
        title_label = ttk.Label(title_frame, text="üîê G√©n√©rateur de Mots de Passe", style='Title.TLabel')
        title_label.pack()
        

        # Cr√©dit styl√© avec lien GitHub cliquable et effet hover
        credits_frame = tk.Frame(title_frame, bg=self.bg_dark)
        credits_frame.pack(pady=8)
        
        # Texte des cr√©dits
        tk.Label(credits_frame, text="D√©velopp√© par Solvyrth ‚Ä¢", font=("SF Pro Text", 11),
                bg=self.bg_dark, fg=self.text_secondary).pack(side=tk.LEFT)
        
        # Lien GitHub cliquable avec style macOS
        import webbrowser
        github_label = tk.Label(credits_frame, text="GitHub", font=("SF Pro Text", 11, "underline"),
                               bg=self.bg_dark, fg=self.accent_blue, cursor="hand2")
        github_label.pack(side=tk.LEFT)
        github_label.bind("<Button-1>", lambda e: webbrowser.open("https://github.com/Solvyrth"))
        # Effet hover
        github_label.bind("<Enter>", lambda e: github_label.config(fg="#0051D0"))
        github_label.bind("<Leave>", lambda e: github_label.config(fg=self.accent_blue))
        
        version_label = ttk.Label(title_frame, text="Version 2.0", style='Subtitle.TLabel')
        version_label.pack()
        
        # Frame principal avec coins arrondis (effet visuel)
        main_frame = tk.Frame(self.root, bg=self.bg_secondary, relief='flat', bd=0)
        main_frame.pack(padx=30, pady=20, fill='both', expand=True)
        
        # Configuration du mot de passe avec style macOS
        config_frame = tk.Frame(main_frame, bg=self.bg_secondary)
        config_frame.pack(pady=25, padx=25, fill='x')
        
        # Longueur avec style macOS (fix largeur)
        length_frame = tk.Frame(config_frame, bg=self.bg_secondary)
        length_frame.pack(fill='x', pady=12, padx=8)
        length_label = tk.Label(length_frame, text="Longueur du mot de passe:", 
                               bg=self.bg_secondary, fg=self.text_primary, font=('SF Pro Text', 12))
        length_label.pack(side='left', padx=(0,10))
        self.length_var = tk.StringVar(value="16")
        length_spinbox = tk.Spinbox(length_frame, from_=4, to=30, textvariable=self.length_var, width=8, 
                                   font=('SF Pro Text', 11), bg=self.bg_tertiary, fg=self.text_primary,
                                   buttonbackground=self.bg_tertiary, relief='flat', bd=1,
                                   insertbackground=self.text_primary, selectbackground=self.accent_blue)
        length_spinbox.pack(side='right', padx=(10,0), pady=2)

        # Nombre de mots de passe (fix largeur)
        count_frame = tk.Frame(config_frame, bg=self.bg_secondary)
        count_frame.pack(fill='x', pady=12, padx=8)
        count_label = tk.Label(count_frame, text="Nombre de mots de passe:", 
                              bg=self.bg_secondary, fg=self.text_primary, font=('SF Pro Text', 12))
        count_label.pack(side='left', padx=(0,10))
        self.count_var = tk.StringVar(value="3")
        count_spinbox = tk.Spinbox(count_frame, from_=1, to=10, textvariable=self.count_var, width=8, 
                                  font=('SF Pro Text', 11), bg=self.bg_tertiary, fg=self.text_primary,
                                  buttonbackground=self.bg_tertiary, relief='flat', bd=1,
                                  insertbackground=self.text_primary, selectbackground=self.accent_blue)
        count_spinbox.pack(side='right', padx=(10,0), pady=2)
        
        # Options avec style macOS
        options_frame = tk.Frame(config_frame, bg=self.bg_secondary)
        options_frame.pack(fill='x', pady=20)
        
        options_title = tk.Label(options_frame, text="Options:", 
                                bg=self.bg_secondary, fg=self.text_primary, font=('SF Pro Text', 14, 'bold'))
        options_title.pack(anchor='w', pady=(0, 10))
        
        self.special_chars_var = tk.BooleanVar(value=True)
        special_check = tk.Checkbutton(options_frame, text="üî£ Inclure des caract√®res sp√©ciaux (!@#$%^&*)", 
                                     variable=self.special_chars_var, bg=self.bg_secondary, fg=self.text_primary, 
                                     selectcolor=self.accent_blue, font=('SF Pro Text', 11),
                                     activebackground=self.bg_secondary, activeforeground=self.text_primary,
                                     relief='flat', bd=0)
        special_check.pack(anchor='w', pady=3)
        
        self.uppercase_var = tk.BooleanVar(value=True)
        upper_check = tk.Checkbutton(options_frame, text="üî§ Inclure des majuscules (A-Z)", 
                                   variable=self.uppercase_var, bg=self.bg_secondary, fg=self.text_primary, 
                                   selectcolor=self.accent_blue, font=('SF Pro Text', 11),
                                   activebackground=self.bg_secondary, activeforeground=self.text_primary,
                                   relief='flat', bd=0)
        upper_check.pack(anchor='w', pady=3)
        
        self.lowercase_var = tk.BooleanVar(value=True)
        lower_check = tk.Checkbutton(options_frame, text="üî° Inclure des minuscules (a-z)", 
                                   variable=self.lowercase_var, bg=self.bg_secondary, fg=self.text_primary, 
                                   selectcolor=self.accent_blue, font=('SF Pro Text', 11),
                                   activebackground=self.bg_secondary, activeforeground=self.text_primary,
                                   relief='flat', bd=0)
        lower_check.pack(anchor='w', pady=3)
        
        self.numbers_var = tk.BooleanVar(value=True)
        numbers_check = tk.Checkbutton(options_frame, text="üî¢ Inclure des chiffres (0-9)", 
                                     variable=self.numbers_var, bg=self.bg_secondary, fg=self.text_primary, 
                                     selectcolor=self.accent_blue, font=('SF Pro Text', 11),
                                     activebackground=self.bg_secondary, activeforeground=self.text_primary,
                                     relief='flat', bd=0)
        numbers_check.pack(anchor='w', pady=3)
        
        # Boutons avec style macOS et contraste optimal
        buttons_frame = tk.Frame(main_frame, bg=self.bg_secondary)
        buttons_frame.pack(pady=25)
        
        generate_btn = tk.Button(buttons_frame, text="üé≤ G√©n√©rer", command=self.on_generate_click,
                               bg=self.accent_blue, fg='#000000', font=('SF Pro Text', 12, 'bold'), 
                               relief='flat', bd=0, padx=25, pady=12, cursor='hand2',
                               activebackground='#0056b3', activeforeground='#000000')
        generate_btn.pack(side='left', padx=8)
        
        save_btn = tk.Button(buttons_frame, text="üíæ Sauvegarder", command=self.save_to_file,
                           bg=self.accent_green, fg='#000000', font=('SF Pro Text', 12, 'bold'), 
                           relief='flat', bd=0, padx=25, pady=12, cursor='hand2',
                           activebackground='#28a745', activeforeground='#000000')
        save_btn.pack(side='left', padx=8)
        
        clear_btn = tk.Button(buttons_frame, text="üóëÔ∏è Effacer", command=self.clear_results,
                            bg=self.accent_red, fg='#000000', font=('SF Pro Text', 12, 'bold'), 
                            relief='flat', bd=0, padx=25, pady=12, cursor='hand2',
                            activebackground='#dc3545', activeforeground='#000000')
        clear_btn.pack(side='left', padx=8)
        
        # Zone de r√©sultats avec style macOS
        results_frame = tk.Frame(main_frame, bg=self.bg_secondary)
        results_frame.pack(fill='both', expand=True, padx=25, pady=25)
        
        results_title = tk.Label(results_frame, text="üìã Mots de passe g√©n√©r√©s:", 
                                bg=self.bg_secondary, fg=self.text_primary, font=('SF Pro Text', 14, 'bold'))
        results_title.pack(anchor='w', pady=(0, 10))
        
        # Zone de texte avec scrollbar style macOS
        text_frame = tk.Frame(results_frame, bg=self.bg_secondary)
        text_frame.pack(fill='both', expand=True, pady=10)
        
        self.results_text = tk.Text(text_frame, height=12, font=('SF Mono', 11), 
                                  bg=self.bg_tertiary, fg=self.text_primary, insertbackground=self.accent_blue,
                                  relief='flat', bd=1, selectbackground=self.accent_blue, selectforeground='white',
                                  wrap='word', padx=15, pady=15)
        
        scrollbar = tk.Scrollbar(text_frame, orient='vertical', command=self.results_text.yview,
                               bg=self.bg_tertiary, troughcolor=self.bg_secondary, 
                               activebackground=self.text_secondary, relief='flat', bd=0)
        self.results_text.configure(yscrollcommand=scrollbar.set)
        
        self.results_text.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # Message initial dans la zone de r√©sultats
        self.results_text.insert(tk.END, "\nBienvenue !\n\nCliquez sur 'G√©n√©rer' pour cr√©er vos mots de passe s√©curis√©s.\n\nAucun mot de passe n'est g√©n√©r√© tant que vous n'avez pas cliqu√© sur le bouton.")
        self.generated_passwords = []
    
    def on_generate_click(self):
        """Fonction appel√©e lors du clic sur le bouton G√©n√©rer"""
        print("DEBUG: Bouton G√©n√©rer cliqu√©!")
        self.generate_passwords()
        
    def generate_password(self, length, use_special_chars=True, use_uppercase=True, use_lowercase=True, use_numbers=True):
        """G√©n√®re un mot de passe selon les crit√®res sp√©cifi√©s"""
        chars = ""
        
        if use_lowercase:
            chars += string.ascii_lowercase
        if use_uppercase:
            chars += string.ascii_uppercase
        if use_numbers:
            chars += string.digits
        if use_special_chars:
            chars += "!@#$%^&*()_+-=[]{}|;:,.<>?"
            
        if not chars:
            # Si aucune option n'est s√©lectionn√©e, utiliser au moins les lettres
            chars = string.ascii_letters + string.digits
            
        password = ''.join(random.choice(chars) for _ in range(length))
        return password
    
    def generate_passwords(self):
        """G√©n√®re les mots de passe selon la configuration"""
        print("DEBUG: G√©n√©ration de mots de passe en cours...")
        try:
            length = int(self.length_var.get())
            count = int(self.count_var.get())
            
            if length < 4 or length > 30:
                messagebox.showerror("Erreur", "La longueur doit √™tre entre 4 et 30 caract√®res", parent=self.root)
                return
                
            if count < 1 or count > 10:
                messagebox.showerror("Erreur", "Le nombre doit √™tre entre 1 et 10", parent=self.root)
                return
            
            # V√©rifier qu'au moins une option est coch√©e
            if not any([self.special_chars_var.get(), self.uppercase_var.get(), 
                       self.lowercase_var.get(), self.numbers_var.get()]):
                # Cocher automatiquement toutes les options si aucune n'est s√©lectionn√©e
                self.special_chars_var.set(True)
                self.uppercase_var.set(True)
                self.lowercase_var.set(True)
                self.numbers_var.set(True)
            
            # Effacer et reg√©n√©rer
            self.generated_passwords = []
            self.results_text.config(state='normal')
            self.results_text.delete(1.0, tk.END)
            
            # G√©n√©rer les mots de passe
            print(f"DEBUG: G√©n√©ration de {count} mots de passe de {length} caract√®res")
            for i in range(count):
                password = self.generate_password(
                    length,
                    self.special_chars_var.get(),
                    self.uppercase_var.get(),
                    self.lowercase_var.get(),
                    self.numbers_var.get()
                )
                self.generated_passwords.append(password)
                print(f"DEBUG: Mot de passe {i+1}: {password}")
                
            print(f"DEBUG: ‚úÖ {len(self.generated_passwords)} mots de passe g√©n√©r√©s avec succ√®s")
            
            # Obtenir l'heure actuelle pour montrer quand la g√©n√©ration a eu lieu
            from datetime import datetime
            current_time = datetime.now().strftime("%H:%M:%S")
            generation_id = random.randint(1000, 9999)  # ID unique pour chaque g√©n√©ration
            
            # Affichage des r√©sultats avec un identifiant unique
            self.results_text.insert(tk.END, f"üïê NOUVELLE G√âN√âRATION √† {current_time} (ID: {generation_id})\n")
            self.results_text.insert(tk.END, f"‚úÖ {count} mot(s) de passe g√©n√©r√©(s) avec succ√®s !\n")
            self.results_text.insert(tk.END, f"üìè Longueur: {length} caract√®res\n")
            
            # Afficher les options utilis√©es
            options_used = []
            if self.special_chars_var.get():
                options_used.append("üî£ Caract√®res sp√©ciaux")
            if self.uppercase_var.get():
                options_used.append("üî§ Majuscules") 
            if self.lowercase_var.get():
                options_used.append("üî° Minuscules")
            if self.numbers_var.get():
                options_used.append("üî¢ Chiffres")
            
            self.results_text.insert(tk.END, f"üéØ Options: {', '.join(options_used)}\n")
            self.results_text.insert(tk.END, "‚îÅ" * 50 + "\n\n")
            
            for i, password in enumerate(self.generated_passwords, 1):
                self.results_text.insert(tk.END, f"üîë Mot de passe {i:2d}: {password}\n")
                
            self.results_text.insert(tk.END, "\n" + "‚îÅ" * 50 + "\n")
            self.results_text.insert(tk.END, "üí° Conseil: Utilisez des mots de passe diff√©rents pour chaque compte !")
            
            # Activer l'√©tat disabled pour √©viter la modification
            self.results_text.config(state='disabled')
            
            # Forcer le scroll vers le haut et la mise √† jour de l'affichage
            self.results_text.see(tk.INSERT)
            self.results_text.mark_set(tk.INSERT, "1.0")
            self.results_text.see("1.0")
            self.results_text.update()
            self.root.update()
            print("DEBUG: Mise √† jour de l'affichage termin√©e")
                
        except ValueError:
            messagebox.showerror("Erreur", "Veuillez entrer des valeurs num√©riques valides", parent=self.root)
        except Exception as e:
            messagebox.showerror("Erreur", f"Une erreur s'est produite: {str(e)}", parent=self.root)
    
    def save_to_file(self):
        """Sauvegarde les mots de passe dans un fichier"""
        if not self.generated_passwords:
            messagebox.showwarning("Attention", "Aucun mot de passe √† sauvegarder. G√©n√©rez d'abord des mots de passe.", parent=self.root)
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Fichiers texte", "*.txt"), ("Tous les fichiers", "*.*")],
            title="Sauvegarder les mots de passe",
            initialfile="mots_de_passe.txt"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n")
                    f.write("‚ïë               MOTS DE PASSE - PASSWORD GENERATOR             ‚ïë\n")
                    f.write("‚ïë                  https://github.com/solvyrth                 ‚ïë\n")
                    f.write("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n")
                    
                    f.write(f"üìä INFORMATIONS DE G√âN√âRATION:\n")
                    f.write(f"‚îú‚îÄ Nombre total: {len(self.generated_passwords)} mot(s) de passe\n")
                    f.write(f"‚îú‚îÄ Longueur: {self.length_var.get()} caract√®res\n")
                    f.write(f"‚îî‚îÄ Date de g√©n√©ration: {self.get_current_datetime()}\n\n")
                    
                    f.write(f"‚öôÔ∏è  OPTIONS UTILIS√âES:\n")
                    f.write(f"‚îú‚îÄ Caract√®res sp√©ciaux: {'‚úÖ Oui' if self.special_chars_var.get() else '‚ùå Non'}\n")
                    f.write(f"‚îú‚îÄ Majuscules (A-Z): {'‚úÖ Oui' if self.uppercase_var.get() else '‚ùå Non'}\n")
                    f.write(f"‚îú‚îÄ Minuscules (a-z): {'‚úÖ Oui' if self.lowercase_var.get() else '‚ùå Non'}\n")
                    f.write(f"‚îî‚îÄ Chiffres (0-9): {'‚úÖ Oui' if self.numbers_var.get() else '‚ùå Non'}\n\n")
                    
                    f.write("üîë MOTS DE PASSE G√âN√âR√âS:\n")
                    f.write("‚ïê" * 60 + "\n")
                    for i, password in enumerate(self.generated_passwords, 1):
                        f.write(f"{i:2d}. {password}\n")
                    f.write("‚ïê" * 60 + "\n\n")
                    
                    f.write("‚ö†Ô∏è  CONSEILS DE S√âCURIT√â:\n")
                    f.write("‚Ä¢ Utilisez un mot de passe diff√©rent pour chaque compte\n")
                    f.write("‚Ä¢ Ne partagez jamais vos mots de passe\n")
                    f.write("‚Ä¢ Stockez ce fichier dans un endroit s√©curis√©\n")
                    f.write("‚Ä¢ Supprimez ce fichier apr√®s utilisation si possible\n\n")
                    f.write("G√©n√©rateur cr√©√© par Solvyrth - Version 2.0")
                    
                messagebox.showinfo("Succ√®s", f"‚úÖ Mots de passe sauvegard√©s avec succ√®s !\n\nüìÅ Fichier: {filename}\n\nüí° N'oubliez pas de s√©curiser ce fichier.", parent=self.root)
            except Exception as e:
                messagebox.showerror("Erreur", f"‚ùå Erreur lors de la sauvegarde:\n{str(e)}", parent=self.root)
    
    def get_current_datetime(self):
        """Retourne la date et l'heure actuelles format√©es"""
        from datetime import datetime
        return datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")
    
    def clear_results(self):
        """Efface les r√©sultats"""
        self.results_text.delete(1.0, tk.END)
        self.generated_passwords = []
        self.results_text.insert(tk.END, "üóëÔ∏è R√©sultats effac√©s. Cliquez sur 'G√©n√©rer' pour cr√©er de nouveaux mots de passe.")
    
    def open_github_profile(self, event=None):
        """Ouvre le profil GitHub dans le navigateur"""
        import webbrowser
        webbrowser.open("https://github.com/Solvyrth")

def main():
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
